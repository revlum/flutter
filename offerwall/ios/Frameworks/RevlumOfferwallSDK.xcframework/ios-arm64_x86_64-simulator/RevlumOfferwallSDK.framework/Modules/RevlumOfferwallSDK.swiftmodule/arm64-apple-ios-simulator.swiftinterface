// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -package-name revlumofferwallsdk -module-name RevlumOfferwallSDK
import Foundation
import Swift
import SwiftUI
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
final public class ClientError : Swift.Error {
  final public let message: Swift.String
  public init(message: Swift.String = "")
  @objc deinit
}
final public class NetworkError : Swift.Error {
  final public let message: Swift.String
  public init(message: Swift.String = "")
  @objc deinit
}
final public class ServerError : Swift.Error {
  final public let message: Swift.String
  public init(message: Swift.String = "")
  @objc deinit
}
final public class UnknownError : Swift.Error {
  final public let message: Swift.String
  public init(message: Swift.String = "")
  @objc deinit
}
@available(macOS 12.0, *)
@_Concurrency.MainActor(unsafe) public struct OfferwallView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s18RevlumOfferwallSDK0B4ViewV4bodyQrvp", 0) __
}
public struct CheckReward : Swift.Equatable {
  public let offers: [RevlumOfferwallSDK.Offer]
  public let reward: Swift.Double
  public static func == (a: RevlumOfferwallSDK.CheckReward, b: RevlumOfferwallSDK.CheckReward) -> Swift.Bool
}
public struct Offer : Swift.Equatable {
  public let status: Swift.String
  public let id: Swift.String
  public let name: Swift.String
  public let revenue: Swift.Double
  public let reward: Swift.Double
  public let transactionId: Swift.String
  public let time: Swift.Int64
  public static func == (a: RevlumOfferwallSDK.Offer, b: RevlumOfferwallSDK.Offer) -> Swift.Bool
}
public enum CheckRewardError : Swift.Error {
  case missingCheckRewardData
  case missingConversionData
  case noConversionsFound(Swift.String)
  case invalidApiKey(Swift.String)
  case rateLimitExceeded(Swift.String)
}
@_hasMissingDesignatedInitializers final public class RevlumOfferwallSdk {
  public static let shared: RevlumOfferwallSDK.RevlumOfferwallSdk
  final public func configure(apiKey: Swift.String, subId: Swift.String? = nil, userId: Swift.String? = nil)
  public static func getOfferwallView() -> RevlumOfferwallSDK.OfferwallView
  final public func setSubId(subId: Swift.String?)
  final public func setUserId(_ userId: Swift.String)
  #if compiler(>=5.3) && $AsyncAwait
  final public func checkReward() async -> Swift.Result<RevlumOfferwallSDK.CheckReward, any Swift.Error>
  #endif
  final public func checkReward(onCheckReward: @escaping (RevlumOfferwallSDK.CheckReward) -> Swift.Void, onError: @escaping (any Swift.Error) -> Swift.Void)
  @objc deinit
}
